/* 
 * Fax.to REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get areacodes . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns></returns>
        void AreacodesCountryCodeStateIdGet (string countryCode, string stateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get areacodes . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AreacodesCountryCodeStateIdGetWithHttpInfo (string countryCode, string stateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups countryCode. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns></returns>
        void CountriesCountryCodeDidgroupsGet (string countryCode, string didGroupIds, string stateId, string cityNamePattern);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups countryCode. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountriesCountryCodeDidgroupsGetWithHttpInfo (string countryCode, string didGroupIds, string stateId, string cityNamePattern);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups provision. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns></returns>
        void CountriesDidgroupsDidGroupIdProvisionPost (string didGroupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups provision. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountriesDidgroupsDidGroupIdProvisionPostWithHttpInfo (string didGroupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get countries. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CountriesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get countries. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountriesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get States . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns></returns>
        void StatesCountryCodeGet (string countryCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get States . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatesCountryCodeGetWithHttpInfo (string countryCode);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get areacodes . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AreacodesCountryCodeStateIdGetAsync (string countryCode, string stateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get areacodes . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AreacodesCountryCodeStateIdGetAsyncWithHttpInfo (string countryCode, string stateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups countryCode. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountriesCountryCodeDidgroupsGetAsync (string countryCode, string didGroupIds, string stateId, string cityNamePattern);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups countryCode. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountriesCountryCodeDidgroupsGetAsyncWithHttpInfo (string countryCode, string didGroupIds, string stateId, string cityNamePattern);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups provision. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountriesDidgroupsDidGroupIdProvisionPostAsync (string didGroupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API didgroups provision. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountriesDidgroupsDidGroupIdProvisionPostAsyncWithHttpInfo (string didGroupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get countries. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountriesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get countries. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountriesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get States . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatesCountryCodeGetAsync (string countryCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get States . 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatesCountryCodeGetAsyncWithHttpInfo (string countryCode);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CountryApi : ICountryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CountryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  This API get areacodes . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns></returns>
        public void AreacodesCountryCodeStateIdGet (string countryCode, string stateId)
        {
             AreacodesCountryCodeStateIdGetWithHttpInfo(countryCode, stateId);
        }

        /// <summary>
        ///  This API get areacodes . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AreacodesCountryCodeStateIdGetWithHttpInfo (string countryCode, string stateId)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->AreacodesCountryCodeStateIdGet");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling CountryApi->AreacodesCountryCodeStateIdGet");

            var localVarPath = "/areacodes/{countryCode}/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", Configuration.ApiClient.ParameterToString(stateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AreacodesCountryCodeStateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get areacodes . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AreacodesCountryCodeStateIdGetAsync (string countryCode, string stateId)
        {
             await AreacodesCountryCodeStateIdGetAsyncWithHttpInfo(countryCode, stateId);

        }

        /// <summary>
        ///  This API get areacodes . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AreacodesCountryCodeStateIdGetAsyncWithHttpInfo (string countryCode, string stateId)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->AreacodesCountryCodeStateIdGet");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling CountryApi->AreacodesCountryCodeStateIdGet");

            var localVarPath = "/areacodes/{countryCode}/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", Configuration.ApiClient.ParameterToString(stateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AreacodesCountryCodeStateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API didgroups countryCode. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns></returns>
        public void CountriesCountryCodeDidgroupsGet (string countryCode, string didGroupIds, string stateId, string cityNamePattern)
        {
             CountriesCountryCodeDidgroupsGetWithHttpInfo(countryCode, didGroupIds, stateId, cityNamePattern);
        }

        /// <summary>
        ///  This API didgroups countryCode. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountriesCountryCodeDidgroupsGetWithHttpInfo (string countryCode, string didGroupIds, string stateId, string cityNamePattern)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'didGroupIds' is set
            if (didGroupIds == null)
                throw new ApiException(400, "Missing required parameter 'didGroupIds' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'cityNamePattern' is set
            if (cityNamePattern == null)
                throw new ApiException(400, "Missing required parameter 'cityNamePattern' when calling CountryApi->CountriesCountryCodeDidgroupsGet");

            var localVarPath = "/countries/{countryCode}/didgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (didGroupIds != null) localVarQueryParams.Add("didGroupIds", Configuration.ApiClient.ParameterToString(didGroupIds)); // query parameter
            if (stateId != null) localVarQueryParams.Add("stateId", Configuration.ApiClient.ParameterToString(stateId)); // query parameter
            if (cityNamePattern != null) localVarQueryParams.Add("cityNamePattern", Configuration.ApiClient.ParameterToString(cityNamePattern)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesCountryCodeDidgroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API didgroups countryCode. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountriesCountryCodeDidgroupsGetAsync (string countryCode, string didGroupIds, string stateId, string cityNamePattern)
        {
             await CountriesCountryCodeDidgroupsGetAsyncWithHttpInfo(countryCode, didGroupIds, stateId, cityNamePattern);

        }

        /// <summary>
        ///  This API didgroups countryCode. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <param name="didGroupIds">didGroupId in the Country</param>
        /// <param name="stateId">stateId in the Country</param>
        /// <param name="cityNamePattern">cityNamePattern in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountriesCountryCodeDidgroupsGetAsyncWithHttpInfo (string countryCode, string didGroupIds, string stateId, string cityNamePattern)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'didGroupIds' is set
            if (didGroupIds == null)
                throw new ApiException(400, "Missing required parameter 'didGroupIds' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling CountryApi->CountriesCountryCodeDidgroupsGet");
            // verify the required parameter 'cityNamePattern' is set
            if (cityNamePattern == null)
                throw new ApiException(400, "Missing required parameter 'cityNamePattern' when calling CountryApi->CountriesCountryCodeDidgroupsGet");

            var localVarPath = "/countries/{countryCode}/didgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (didGroupIds != null) localVarQueryParams.Add("didGroupIds", Configuration.ApiClient.ParameterToString(didGroupIds)); // query parameter
            if (stateId != null) localVarQueryParams.Add("stateId", Configuration.ApiClient.ParameterToString(stateId)); // query parameter
            if (cityNamePattern != null) localVarQueryParams.Add("cityNamePattern", Configuration.ApiClient.ParameterToString(cityNamePattern)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesCountryCodeDidgroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API didgroups provision. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns></returns>
        public void CountriesDidgroupsDidGroupIdProvisionPost (string didGroupId)
        {
             CountriesDidgroupsDidGroupIdProvisionPostWithHttpInfo(didGroupId);
        }

        /// <summary>
        ///  This API didgroups provision. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountriesDidgroupsDidGroupIdProvisionPostWithHttpInfo (string didGroupId)
        {
            // verify the required parameter 'didGroupId' is set
            if (didGroupId == null)
                throw new ApiException(400, "Missing required parameter 'didGroupId' when calling CountryApi->CountriesDidgroupsDidGroupIdProvisionPost");

            var localVarPath = "/countries/didgroups/{didGroupId}/provision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (didGroupId != null) localVarPathParams.Add("didGroupId", Configuration.ApiClient.ParameterToString(didGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesDidgroupsDidGroupIdProvisionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API didgroups provision. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountriesDidgroupsDidGroupIdProvisionPostAsync (string didGroupId)
        {
             await CountriesDidgroupsDidGroupIdProvisionPostAsyncWithHttpInfo(didGroupId);

        }

        /// <summary>
        ///  This API didgroups provision. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">didGroupId in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountriesDidgroupsDidGroupIdProvisionPostAsyncWithHttpInfo (string didGroupId)
        {
            // verify the required parameter 'didGroupId' is set
            if (didGroupId == null)
                throw new ApiException(400, "Missing required parameter 'didGroupId' when calling CountryApi->CountriesDidgroupsDidGroupIdProvisionPost");

            var localVarPath = "/countries/didgroups/{didGroupId}/provision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (didGroupId != null) localVarPathParams.Add("didGroupId", Configuration.ApiClient.ParameterToString(didGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesDidgroupsDidGroupIdProvisionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get countries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CountriesGet ()
        {
             CountriesGetWithHttpInfo();
        }

        /// <summary>
        ///  This API get countries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountriesGetWithHttpInfo ()
        {

            var localVarPath = "/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get countries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountriesGetAsync ()
        {
             await CountriesGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  This API get countries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountriesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get States . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns></returns>
        public void StatesCountryCodeGet (string countryCode)
        {
             StatesCountryCodeGetWithHttpInfo(countryCode);
        }

        /// <summary>
        ///  This API get States . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StatesCountryCodeGetWithHttpInfo (string countryCode)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->StatesCountryCodeGet");

            var localVarPath = "/states/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesCountryCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get States . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatesCountryCodeGetAsync (string countryCode)
        {
             await StatesCountryCodeGetAsyncWithHttpInfo(countryCode);

        }

        /// <summary>
        ///  This API get States . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">countryCode in the Country</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StatesCountryCodeGetAsyncWithHttpInfo (string countryCode)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling CountryApi->StatesCountryCodeGet");

            var localVarPath = "/states/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", Configuration.ApiClient.ParameterToString(countryCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesCountryCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
