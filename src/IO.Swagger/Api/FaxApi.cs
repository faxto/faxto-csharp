/* 
 * Fax.to REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the cost of a sending fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns></returns>
        void FaxDocumentIdCostsGet (string apiKey, string faxNumber, decimal? documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the cost of a sending fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxDocumentIdCostsGetWithHttpInfo (string apiKey, string faxNumber, decimal? documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get all fax history. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns></returns>
        void FaxHistoryGet (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get all fax history. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxHistoryGetWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the status of the fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns></returns>
        void FaxJobIdStatusGet (string apiKey, decimal? jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the status of the fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxJobIdStatusGetWithHttpInfo (string apiKey, decimal? jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns></returns>
        void FaxPost (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FaxPostWithHttpInfo (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the cost of a sending fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxDocumentIdCostsGetAsync (string apiKey, string faxNumber, decimal? documentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the cost of a sending fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxDocumentIdCostsGetAsyncWithHttpInfo (string apiKey, string faxNumber, decimal? documentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get all fax history. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxHistoryGetAsync (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get all fax history. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxHistoryGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the status of the fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxJobIdStatusGetAsync (string apiKey, decimal? jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API get the status of the fax. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxJobIdStatusGetAsyncWithHttpInfo (string apiKey, decimal? jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FaxPostAsync (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaxPostAsyncWithHttpInfo (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxApi : IFaxApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  This API get the cost of a sending fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns></returns>
        public void FaxDocumentIdCostsGet (string apiKey, string faxNumber, decimal? documentId)
        {
             FaxDocumentIdCostsGetWithHttpInfo(apiKey, faxNumber, documentId);
        }

        /// <summary>
        ///  This API get the cost of a sending fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FaxDocumentIdCostsGetWithHttpInfo (string apiKey, string faxNumber, decimal? documentId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxDocumentIdCostsGet");
            // verify the required parameter 'faxNumber' is set
            if (faxNumber == null)
                throw new ApiException(400, "Missing required parameter 'faxNumber' when calling FaxApi->FaxDocumentIdCostsGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling FaxApi->FaxDocumentIdCostsGet");

            var localVarPath = "/fax/{document_id}/costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("document_id", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (faxNumber != null) localVarQueryParams.Add("fax_number", Configuration.ApiClient.ParameterToString(faxNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxDocumentIdCostsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get the cost of a sending fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxDocumentIdCostsGetAsync (string apiKey, string faxNumber, decimal? documentId)
        {
             await FaxDocumentIdCostsGetAsyncWithHttpInfo(apiKey, faxNumber, documentId);

        }

        /// <summary>
        ///  This API get the cost of a sending fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">id of the file / document_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FaxDocumentIdCostsGetAsyncWithHttpInfo (string apiKey, string faxNumber, decimal? documentId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxDocumentIdCostsGet");
            // verify the required parameter 'faxNumber' is set
            if (faxNumber == null)
                throw new ApiException(400, "Missing required parameter 'faxNumber' when calling FaxApi->FaxDocumentIdCostsGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling FaxApi->FaxDocumentIdCostsGet");

            var localVarPath = "/fax/{document_id}/costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("document_id", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (faxNumber != null) localVarQueryParams.Add("fax_number", Configuration.ApiClient.ParameterToString(faxNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxDocumentIdCostsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get all fax history. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns></returns>
        public void FaxHistoryGet (string apiKey, string limit = null, string page = null)
        {
             FaxHistoryGetWithHttpInfo(apiKey, limit, page);
        }

        /// <summary>
        ///  This API get all fax history. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FaxHistoryGetWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxHistoryGet");

            var localVarPath = "/fax-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get all fax history. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxHistoryGetAsync (string apiKey, string limit = null, string page = null)
        {
             await FaxHistoryGetAsyncWithHttpInfo(apiKey, limit, page);

        }

        /// <summary>
        ///  This API get all fax history. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="limit">Number of records to return (optional)</param>
        /// <param name="page">Page to display (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FaxHistoryGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxHistoryGet");

            var localVarPath = "/fax-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get the status of the fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns></returns>
        public void FaxJobIdStatusGet (string apiKey, decimal? jobId)
        {
             FaxJobIdStatusGetWithHttpInfo(apiKey, jobId);
        }

        /// <summary>
        ///  This API get the status of the fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FaxJobIdStatusGetWithHttpInfo (string apiKey, decimal? jobId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxJobIdStatusGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FaxApi->FaxJobIdStatusGet");

            var localVarPath = "/fax/{job_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxJobIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API get the status of the fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxJobIdStatusGetAsync (string apiKey, decimal? jobId)
        {
             await FaxJobIdStatusGetAsyncWithHttpInfo(apiKey, jobId);

        }

        /// <summary>
        ///  This API get the status of the fax. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="jobId">id of the fax job</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FaxJobIdStatusGetAsyncWithHttpInfo (string apiKey, decimal? jobId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxJobIdStatusGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FaxApi->FaxJobIdStatusGet");

            var localVarPath = "/fax/{job_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxJobIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns></returns>
        public void FaxPost (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null)
        {
             FaxPostWithHttpInfo(apiKey, faxNumber, documentId, tsiNumber, file, deleteFile);
        }

        /// <summary>
        ///  This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FaxPostWithHttpInfo (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxPost");
            // verify the required parameter 'faxNumber' is set
            if (faxNumber == null)
                throw new ApiException(400, "Missing required parameter 'faxNumber' when calling FaxApi->FaxPost");

            var localVarPath = "/fax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (faxNumber != null) localVarFormParams.Add("fax_number", Configuration.ApiClient.ParameterToString(faxNumber)); // form parameter
            if (documentId != null) localVarFormParams.Add("document_id", Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (tsiNumber != null) localVarFormParams.Add("tsi_number", Configuration.ApiClient.ParameterToString(tsiNumber)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (deleteFile != null) localVarFormParams.Add("delete_file", Configuration.ApiClient.ParameterToString(deleteFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FaxPostAsync (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null)
        {
             await FaxPostAsyncWithHttpInfo(apiKey, faxNumber, documentId, tsiNumber, file, deleteFile);

        }

        /// <summary>
        ///  This API send the fax. When we send fax using API, Fax.to send a POST to the Callback URL you specified in https://fax.to/member/api/live. Fax.to send POST data with the following information fax_job_id, status and message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">API Key</param>
        /// <param name="faxNumber">Fax Number</param>
        /// <param name="documentId">Document id. If you want to use existing document you need to specify the document_id (optional)</param>
        /// <param name="tsiNumber">If we want to to change the text or number that appear on &#39;from&#39; or &#39;sender&#39; of the fax (optional)</param>
        /// <param name="file">PDF file to upload (optional)</param>
        /// <param name="deleteFile">Whether to delete file after fax transaction. (put 1 to delete) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FaxPostAsyncWithHttpInfo (string apiKey, string faxNumber, int? documentId = null, string tsiNumber = null, System.IO.Stream file = null, int? deleteFile = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxApi->FaxPost");
            // verify the required parameter 'faxNumber' is set
            if (faxNumber == null)
                throw new ApiException(400, "Missing required parameter 'faxNumber' when calling FaxApi->FaxPost");

            var localVarPath = "/fax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // query parameter
            if (faxNumber != null) localVarFormParams.Add("fax_number", Configuration.ApiClient.ParameterToString(faxNumber)); // form parameter
            if (documentId != null) localVarFormParams.Add("document_id", Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (tsiNumber != null) localVarFormParams.Add("tsi_number", Configuration.ApiClient.ParameterToString(tsiNumber)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (deleteFile != null) localVarFormParams.Add("delete_file", Configuration.ApiClient.ParameterToString(deleteFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FaxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
